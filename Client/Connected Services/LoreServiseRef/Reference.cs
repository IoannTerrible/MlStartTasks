//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.LoreServiseRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LoreServiseRef.IServiseForServer", CallbackContract=typeof(Client.LoreServiseRef.IServiseForServerCallback))]
    public interface IServiseForServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiseForServer/Connect", ReplyAction="http://tempuri.org/IServiseForServer/ConnectResponse")]
        void Connect(string connectlogin, string connectpassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiseForServer/Connect", ReplyAction="http://tempuri.org/IServiseForServer/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync(string connectlogin, string connectpassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiseForServer/Disconnect", ReplyAction="http://tempuri.org/IServiseForServer/DisconnectResponse")]
        void Disconnect(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiseForServer/Disconnect", ReplyAction="http://tempuri.org/IServiseForServer/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiseForServer/SendStringMessage", ReplyAction="http://tempuri.org/IServiseForServer/SendStringMessageResponse")]
        void SendStringMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiseForServer/SendStringMessage", ReplyAction="http://tempuri.org/IServiseForServer/SendStringMessageResponse")]
        System.Threading.Tasks.Task SendStringMessageAsync(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiseForServerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiseForServer/ReceiveLoreMessage")]
        void ReceiveLoreMessage(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiseForServerChannel : Client.LoreServiseRef.IServiseForServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiseForServerClient : System.ServiceModel.DuplexClientBase<Client.LoreServiseRef.IServiseForServer>, Client.LoreServiseRef.IServiseForServer {
        
        public ServiseForServerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiseForServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiseForServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiseForServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiseForServerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect(string connectlogin, string connectpassword) {
            base.Channel.Connect(connectlogin, connectpassword);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string connectlogin, string connectpassword) {
            return base.Channel.ConnectAsync(connectlogin, connectpassword);
        }
        
        public void Disconnect(int userId) {
            base.Channel.Disconnect(userId);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int userId) {
            return base.Channel.DisconnectAsync(userId);
        }
        
        public void SendStringMessage(string message) {
            base.Channel.SendStringMessage(message);
        }
        
        public System.Threading.Tasks.Task SendStringMessageAsync(string message) {
            return base.Channel.SendStringMessageAsync(message);
        }
    }
}
